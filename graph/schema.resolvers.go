package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"github.com/Mr-Ao-Dragon/blogself-backend/graph/model"
)

// User is the resolver for the user field.
func (r *mutationResolver) User(ctx context.Context) (*model.UserMutationAct, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Post is the resolver for the post field.
func (r *mutationResolver) Post(ctx context.Context) (*model.PostMutationAct, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Comment is the resolver for the comment field.
func (r *mutationResolver) Comment(ctx context.Context) (*model.CommentMutationAct, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context) (*model.PostQueryAct, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.UserQueryAct, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context) (*model.CommentQueryAct, error) {
	panic(fmt.Errorf("not implemented: Comment - comment"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }

func (r *mutationResolver) UpdateUser(ctx *context.Context) error {

	return nil
}

type queryResolver struct{ *Resolver }
